@page "/StudentDetails/{studentId:int}"
@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> _localizer
@inject IUnitOfWork _unitOfWork
@inject IMapper _mapper
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">@student.FullName</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.subtitle1" Inline="true"><strong>@_localizer["Date Of Birth"]: </strong></MudText>
                    <MudText Typo="Typo.body1" Inline="true">@student.DateOfBirth.ToShortDateString()</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.subtitle1" Inline="true"><strong>@_localizer["Gender"]: </strong></MudText>
                    <MudText Typo="Typo.body1" Inline="true">@student.Gender</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.subtitle1" Inline="true"><strong>@_localizer["Mobile"]: </strong></MudText>
                    <MudText Typo="Typo.body1" Inline="true">@student.Mobile</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.subtitle1" Inline="true"><strong>@_localizer["Department"]: </strong></MudText>
                    <MudText Typo="Typo.body1" Inline="true">@student.Department</MudText>
                </MudItem>
            </MudGrid>


            <MudTable Items="@student.Enrollments" Hover="true">
                <HeaderContent>
                    <MudTh>@_localizer["Course"]</MudTh>
                    <MudTh>@_localizer["Grade"]</MudTh>
                    <MudTh>@_localizer["EnrollmentDate"]</MudTh>
                    <MudTh>@_localizer["Attendance"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Course</MudTd>
                    <MudTd>@context.Grade</MudTd>
                    <MudTd>@context.EnrollmentDate.ToShortDateString()</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="@( async () => await ToggleAttendanceDialog(@context))">
                            @_localizer["ViewAttendance"]
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="ma-1" Variant="Variant.Outlined"
                       Size="Size.Medium"
                       Color="Color.Primary"
                       @onclick="@(() => NavigateToEdit(@StudentId))">
                @_localizer["Edit"]
            </MudButton>
            <MudButton Class="ma-1" Variant="Variant.Outlined"
                       Size="Size.Medium"
                       Color="Color.Error"
                       @onclick="@(() => NavigateToDelete(@StudentId))">
                @_localizer["Delete"]
            </MudButton>
        </MudCardActions>
    </MudCard>
}


@code {
    [Parameter]
    public int StudentId { get; set; }
    private bool isLoading = true;

    StudentToReturnDto student = new();
    protected override async Task OnInitializedAsync()
        => await LoadStudent();

    private async Task LoadStudent()
    {
        var spec = new StudentWithEnrollmentsAndDepartmentSpecification(StudentId);
        var studentdb = await _unitOfWork.Repository<Student>().GetByIdWithSpecificationAsync(spec);
        if (studentdb != null)
        {
            student = _mapper.Map<Student, StudentToReturnDto>(studentdb);
            isLoading = false;
        }
        else
            Snackbar.Add("Student not found.", MudBlazor.Severity.Error);
    }

    private Task ToggleAttendanceDialog(EnrollmentToReturnWithStudentDto enrollment)
    {
        var parameters = new DialogParameters<AttendanceDialog>
        {
            { x => x.SelectedEnrollment, enrollment }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        };

        return DialogService.ShowAsync<AttendanceDialog>("Delete", parameters, options);
    }

    private void NavigateToEdit(int id) => NavigationManager.NavigateTo($"/update-student/{id}");
    private void NavigateToDelete(int id) => NavigationManager.NavigateTo($"/DeleteStudent/{id}");
}
