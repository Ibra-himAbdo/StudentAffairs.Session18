@page "/update-course/{courseId:int}"
@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> _localizer
@inject IUnitOfWork _unitOfWork
@inject IMapper _mapper
@using StudentAffairs.Server.Dtos


<EditForm Model="@courseModel" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Class="mb-4" @bind-Value="courseModel.Code"
                                  For="@(() => courseModel.Code)"
                                  Label="@_localizer["Code"]"
                                  Immediate="true" />



                    <MudTextField Class="mb-4" @bind-Value="courseModel.Name"
                                  For="@(() => courseModel.Name)"
                                  Label="@_localizer["Name"]"
                                  Immediate="true" />



                    <MudTextField Class="mb-4" @bind-Value="courseModel.Credits"
                                  For="@(() => courseModel.Credits)"
                                  Label="@_localizer["Credits"]"
                                  Immediate="true" />

                    <MudSelect Class="mb-4"
                               @bind-Value="courseModel.DepartmentId"
                               Required="true"
                               Placeholder="Select Department"
                               Label="@_localizer["Department"]">

                        @foreach (var department in departments)
                        {
                            <MudSelectItem Value="@department.Id">@department.Name</MudSelectItem>
                        }
                    </MudSelect>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Update the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int courseId { get; set; }

    private UpdateCourseDto courseModel = new();
    private IReadOnlyList<Department> departments = new List<Department>();
    private bool success = false;

    protected async override Task OnInitializedAsync()
    {
        await LoadCourse();
        departments = await _unitOfWork.Repository<Department>().GetAllAsync();
    }

    private async Task LoadCourse()
    {
        var course = await _unitOfWork.Repository<Course>().GetByIdAsync(courseId);
        if (course != null)
        {
            courseModel = _mapper.Map<UpdateCourseDto>(course);
        }
        else
        {
            Snackbar.Add("Course not found.", MudBlazor.Severity.Error);
        }
    }

    private async Task OnValidSubmit()
    {
        var course = await _unitOfWork.Repository<Course>().GetByIdAsync(courseModel.Id);
        if (course == null)
        {
            Snackbar.Add("Course not found.", MudBlazor.Severity.Error);
            return;
        }

        _mapper.Map(courseModel, course);
        _unitOfWork.Repository<Course>().Update(course);
        await _unitOfWork.CompleteAsync();

        Snackbar.Add("Course information updated successfully!", MudBlazor.Severity.Success);
        success = true;
        StateHasChanged();
    }
}